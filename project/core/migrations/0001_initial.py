# Generated by Django 2.1.7 on 2019-03-01 09:22

import creditcards.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Admin'), (10, 'Mediabuyer'), (20, 'Financier'), (30, 'Account Farmer')], default=10, verbose_name='User role')),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='core.models.user_avatar_path')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Account name')),
                ('label', models.CharField(blank=True, max_length=255, null=True, verbose_name='Label')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('account_status', models.PositiveSmallIntegerField(choices=[(0, 'Active'), (10, 'Inactive'), (20, 'Banned'), (30, 'Need verify')], default=0, verbose_name='Account status')),
                ('review_status', models.PositiveSmallIntegerField(choices=[(0, 'OK'), (10, 'Need phone'), (20, 'Need photo'), (50, 'In progress'), (20, 'Banned')], default=0, verbose_name='Account review status')),
                ('login', models.CharField(max_length=255, verbose_name='Login')),
                ('password', models.CharField(max_length=255, verbose_name='Password')),
                ('phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('email_password', models.CharField(blank=True, max_length=255, null=True, verbose_name='Email Password')),
                ('card_number', creditcards.models.CardNumberField(blank=True, max_length=25, null=True, verbose_name='Credit card number')),
                ('deleted', models.BooleanField(default=False, verbose_name='Is removed')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_accounts', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='FundRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Requested amount')),
                ('reason', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Funds reason')),
                ('category', models.CharField(choices=[('general', 'General'), ('topup', 'Account Topup')], default='general', max_length=64, verbose_name='Request category')),
                ('date', models.DateField(blank=True, default='core.models.get_defaul_topup_date', null=True, verbose_name='Top up date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('funded_at', models.DateTimeField(blank=True, null=True, verbose_name='Funded datetime')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Waiting'), (10, 'Processing'), (20, 'Declined'), (50, 'Done')], default=0, verbose_name='Request status')),
                ('decline_reason', models.CharField(blank=True, max_length=256, null=True, verbose_name='Decline reason')),
                ('deleted', models.BooleanField(default=False, verbose_name='Is removed')),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='funds', to='core.Account')),
                ('processed_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='funds_processed_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
    ]
